version: 2

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: circleci/node:10-browsers
    environment:
      - CHROME_BIN: /usr/bin/google-chrome
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
        # The test job
        test:
            working_directory: ~/project-name
            docker:
                - image: circleci/node:10-browsers
            steps:
                # Checkout the code from the branch into the working_directory
                - checkout
                # Log the current branch
                - run:
                      name: Show current branch
                      command: echo ${CIRCLE_BRANCH}
                # Restore local dependencies from cache
                - restore_cache:
                      keys:
                          - v1-dependencies-{{ checksum "package-lock.json" }}
                          - v1-dependencies-
                # Install project dependencies
                - run:
                      name: Install local dependencies
                      command: npm install
                # Cache local dependencies if they don't exist
                - save_cache:
                      key: v1-dependencies-{{ checksum "package-lock.json" }}
                      paths:
                          - node_modules
                # Lint the source code
                - run:
                      name: Linting
                      command: npm run lint
                # Test the source code
                - run:
                      name: Testing
                      command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
                # End to End test
                - run:
                      name: End to End Test
                      command: npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js
